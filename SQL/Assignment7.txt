sqluser55
Lab Assignment #7
Ian Youn
86406
7/31/2021
7/31/2021

1.
DROP TABLE STUDENTREGISTRATION CASCADE CONSTRAINTS;
DROP TABLE SECTION CASCADE CONSTRAINTS;
DROP TABLE "USER" CASCADE CONSTRAINTS;
DROP TABLE COURSE CASCADE CONSTRAINTS;
DROP TABLE DEPARTMENT CASCADE CONSTRAINTS;
DROP TABLE COLLEGE;
DROP TABLE LOCATION;
DROP TABLE RESIDENT;
DROP TABLE PAYMENT;

CREATE TABLE PAYMENT (
ID NUMBER(5) NOT NULL,
PAYMENTNAME VARCHAR2(50) NOT NULL,
CONSTRAINT PAYMENT_ID_PK PRIMARY KEY (ID));

CREATE TABLE RESIDENT (
ID NUMBER(5) NOT NULL,
RESINAME VARCHAR2(50) NOT NULL,
FEESCHEDULE NUMBER(5) NOT NULL,
CONSTRAINT RESIDENT_ID_PK PRIMARY KEY (ID),
CONSTRAINT RESIDENT_NAME_UK UNIQUE(RESINAME));

CREATE TABLE LOCATION (
ID NUMBER(5) NOT NULL,
LOCATIONNAME VARCHAR2(50) NOT NULL,
CONSTRAINT LOCATION_ID_PK PRIMARY KEY (ID),
CONSTRAINT LOCATION_NAME_UK UNIQUE(LOCATIONNAME));

CREATE TABLE COLLEGE(
ID NUMBER(5) NOT NULL,
NAME VARCHAR2(50) NOT NULL,
ADDRESS VARCHAR2(100) NOT NULL,
TELNO NUMBER(15) NOT NULL,
CONSTRAINT COLLEGE_ID_PK PRIMARY KEY (ID));

CREATE TABLE DEPARTMENT(
ID NUMBER(5) NOT NULL,
NAME VARCHAR2(50) NOT NULL,
LOCID NUMBER(5) NOT NULL,
COLLEGEID NUMBER(5) NOT NULL,
CONSTRAINT DEPARTMENT_ID_PK PRIMARY KEY (ID),
CONSTRAINT DEPARTMENT_LOC_FK FOREIGN KEY (LOCID) REFERENCES LOCATION (ID),
CONSTRAINT DEPARTMENT_COL_FK FOREIGN KEY (COLLEGEID) REFERENCES COLLEGE (ID),
CONSTRAINT DEPARTMENT_NAME_UK UNIQUE(NAME));

CREATE TABLE COURSE(
ID NUMBER(5) NOT NULL,
COURSENO NUMBER(5) NOT NULL,
COURSENAME VARCHAR2(50) NOT NULL,
PREREQ NUMBER(5) CONSTRAINT COURSE_ID_SK REFERENCES COURSE (ID),
DEPTID NUMBER(5),
CONSTRAINT COURSE_ID_PK PRIMARY KEY (ID),
CONSTRAINT COURSE_DEPT_FK FOREIGN KEY (DEPTID) REFERENCES DEPARTMENT (ID),
CONSTRAINT COURSE_NO_UK UNIQUE(COURSENO),
CONSTRAINT COURSE_NAME_UK UNIQUE(COURSENAME));

CREATE TABLE "USER"(
ID NUMBER(5) NOT NULL,
FIRSTNAME VARCHAR2(50) NOT NULL,
LASTNAME VARCHAR2(50) NOT NULL,
ADDRESS VARCHAR2(100) NOT NULL,
EMAIL VARCHAR2(50) NOT NULL,
TELNO NUMBER(15) NOT NULL,
RESIDENTID NUMBER(5),
TYPE NUMBER(2) NOT NULL,
CONSTRAINT USER_ID_PK PRIMARY KEY (ID),
CONSTRAINT USER_RES_FK FOREIGN KEY (RESIDENTID) REFERENCES RESIDENT (ID))
PARTITION BY RANGE (TYPE) (
PARTITION USERS_STUDENT VALUES LESS THAN (11),
PARTITION USERS_TA VALUES LESS THAN (21),
PARTITION USERS_TEACHER VALUES LESS THAN (31),
PARTITION USERS_STAFF VALUES LESS THAN (51));

CREATE TABLE SECTION(
ID NUMBER(5) NOT NULL,
SECTIONNO NUMBER(3) NOT NULL,
COURSEID NUMBER(5) NOT NULL,
LOCATIONID NUMBER(5) NOT NULL,
STARTTIME NUMBER(4),
ENDTIME NUMBER(4),
STARTDATE DATE NOT NULL,
ENDDATE DATE NOT NULL,
USERID NUMBER(5) NOT NULL,
CONSTRAINT SECTION_ID_PK PRIMARY KEY (ID),
CONSTRAINT SECTION_COU_FK FOREIGN KEY (COURSEID) REFERENCES COURSE (ID),
CONSTRAINT SECTION_LOC_FK FOREIGN KEY (LOCATIONID) REFERENCES LOCATION (ID),
CONSTRAINT SECTION_USER_FK FOREIGN KEY (USERID) REFERENCES "USER" (ID),
CONSTRAINT SECTION_NO_UK UNIQUE(SECTIONNO));

CREATE TABLE STUDENTREGISTRATION(
ID NUMBER(5) NOT NULL,
STUDENTID NUMBER(5) NOT NULL,
SECTIONID NUMBER(5) NOT NULL,
FEESTATUS NUMBER(1) NOT NULL,
PAYMENTID NUMBER(5) NOT NULL,
CONSTRAINT STUDENTREGISTRATION_ID_PK PRIMARY KEY (ID),
CONSTRAINT STUDENTREGISTRATION_USER_FK FOREIGN KEY (STUDENTID) REFERENCES "USER" (ID),
CONSTRAINT STUDENTREGISTRATION_SEC_FK FOREIGN KEY (SECTIONID) REFERENCES SECTION (ID),
CONSTRAINT STUDENTREGISTRATION_PAY_FK FOREIGN KEY (PAYMENTID) REFERENCES PAYMENT (ID))
PARTITION BY HASH (ID)
PARTITIONS 5;

2.
I project the Student Reigstration table and the user table to grow the fastest.

A partition by range in the user table will allow us to divide the table based on the user's type. With this, we can divide the user table into students, teachers and etc. for ease of use.

On the student registration table, we want to partition by hash, so we can extract the student info, which will allow us to make partitions more meaningful. Since the primary keys are simply based on order of registration, they have no usefulness. By partitioning by hash, we can divide the registrations based on users and have meaningful partitions.
